/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef USER_INTERFACE_H_
#define USER_INTERFACE_H_

#include "sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'user_interface'.
*/

#ifndef USER_INTERFACE_EVENTQUEUE_BUFFERSIZE
#define USER_INTERFACE_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */

#define USER_INTERFACE_STATE_COUNT 10

/*! Define dimension of the state configuration vector for orthogonal states. */
#define USER_INTERFACE_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_USER_INTERFACE_MAIN_REGION_PRINCIPAL 0
#define SCVI_USER_INTERFACE_MAIN_REGION_CRONOMETRO 0
#define SCVI_USER_INTERFACE_MAIN_REGION_CRONOMETRO_R1_INICIALIZAR 0
#define SCVI_USER_INTERFACE_MAIN_REGION_CRONOMETRO_R1_CORRIENDO 0
#define SCVI_USER_INTERFACE_MAIN_REGION_CRONOMETRO_R1_PAUSAR 0
#define SCVI_USER_INTERFACE_MAIN_REGION_CUENTA_REGRESIVA 0
#define SCVI_USER_INTERFACE_MAIN_REGION_CUENTA_REGRESIVA_R1_INICIALIZAR 0
#define SCVI_USER_INTERFACE_MAIN_REGION_CUENTA_REGRESIVA_R1_CORRIENDO 0
#define SCVI_USER_INTERFACE_MAIN_REGION_CUENTA_REGRESIVA_R1_PAUSAR 0
#define SCVI_USER_INTERFACE_MAIN_REGION_CUENTA_REGRESIVA_R1_FINALIZADO 0



/*! Enumeration of all states */ 
typedef enum
{
	User_interface_last_state,
	User_interface_main_region_Principal,
	User_interface_main_region_Cronometro,
	User_interface_main_region_Cronometro_r1_Inicializar,
	User_interface_main_region_Cronometro_r1_Corriendo,
	User_interface_main_region_Cronometro_r1_Pausar,
	User_interface_main_region_Cuenta_Regresiva,
	User_interface_main_region_Cuenta_Regresiva_r1_Inicializar,
	User_interface_main_region_Cuenta_Regresiva_r1_Corriendo,
	User_interface_main_region_Cuenta_Regresiva_r1_Pausar,
	User_interface_main_region_Cuenta_Regresiva_r1_Finalizado
} User_interfaceStates;

/*! Type definition of the data structure for the User_interfaceIface interface scope. */
typedef struct
{
	sc_boolean UP_raised;
	sc_boolean DOWN_raised;
	sc_boolean SET_raised;
	sc_boolean RESET_raised;
	sc_boolean TIMEOUT_raised;
	sc_boolean TIM_UP_raised;
	sc_boolean TIM_DOWN_raised;
	sc_boolean RESET_TIM_raised;
	sc_boolean UPDATE_raised;
	sc_boolean NEXT_raised;
	sc_integer OLED_ST;
} User_interfaceIface;




/*! 
 * Type definition of the data structure for the User_interface state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	User_interfaceStates stateConfVector[USER_INTERFACE_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	User_interfaceIface iface;
} User_interface;



/*! Initializes the User_interface state machine data structures. Must be called before first usage.*/
extern void user_interface_init(User_interface* handle);

/*! Activates the state machine */
extern void user_interface_enter(User_interface* handle);

/*! Deactivates the state machine */
extern void user_interface_exit(User_interface* handle);

/*! Performs a 'run to completion' step. */
extern void user_interface_runCycle(User_interface* handle);


/*! Raises the in event 'UP' that is defined in the default interface scope. */ 
extern void user_interfaceIface_raise_uP(User_interface* handle);

/*! Raises the in event 'DOWN' that is defined in the default interface scope. */ 
extern void user_interfaceIface_raise_dOWN(User_interface* handle);

/*! Raises the in event 'SET' that is defined in the default interface scope. */ 
extern void user_interfaceIface_raise_sET(User_interface* handle);

/*! Raises the in event 'RESET' that is defined in the default interface scope. */ 
extern void user_interfaceIface_raise_rESET(User_interface* handle);

/*! Raises the in event 'TIMEOUT' that is defined in the default interface scope. */ 
extern void user_interfaceIface_raise_tIMEOUT(User_interface* handle);

/*! Checks if the out event 'TIM_UP' that is defined in the default interface scope has been raised. */ 
extern sc_boolean user_interfaceIface_israised_tIM_UP(const User_interface* handle);

/*! Checks if the out event 'TIM_DOWN' that is defined in the default interface scope has been raised. */ 
extern sc_boolean user_interfaceIface_israised_tIM_DOWN(const User_interface* handle);

/*! Checks if the out event 'RESET_TIM' that is defined in the default interface scope has been raised. */ 
extern sc_boolean user_interfaceIface_israised_rESET_TIM(const User_interface* handle);

/*! Checks if the out event 'UPDATE' that is defined in the default interface scope has been raised. */ 
extern sc_boolean user_interfaceIface_israised_uPDATE(const User_interface* handle);

/*! Checks if the out event 'NEXT' that is defined in the default interface scope has been raised. */ 
extern sc_boolean user_interfaceIface_israised_nEXT(const User_interface* handle);

/*! Gets the value of the variable 'OLED_ST' that is defined in the default interface scope. */ 
extern sc_integer user_interfaceIface_get_oLED_ST(const User_interface* handle);
/*! Sets the value of the variable 'OLED_ST' that is defined in the default interface scope. */ 
extern void user_interfaceIface_set_oLED_ST(User_interface* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean user_interface_isActive(const User_interface* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean user_interface_isFinal(const User_interface* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean user_interface_isStateActive(const User_interface* handle, User_interfaceStates state);


#ifdef __cplusplus
}
#endif 

#endif /* USER_INTERFACE_H_ */
